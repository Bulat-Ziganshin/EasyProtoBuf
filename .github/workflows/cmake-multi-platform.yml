name: CMake on multiple platforms

on:
  workflow_dispatch:
  push:
    branches-ignore: [ "noci-**" ]
    paths-ignore: [ "**.md" ]
  pull_request:
    branches-ignore: [ "noci-**" ]
    paths-ignore: [ "**.md" ]

jobs:
  main:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        cpp_compiler: [g++-13, g++-12, g++-11, g++-10, g++-9, clang++-15, clang++-14, clang++-13]
        cpp_options: ["-std=c++17 -Wall -Wextra -Wpedantic", "-std=c++11 -Wall -Wextra -Wpedantic"]
        os: [ubuntu-22.04]
        extra_cmake_options: [""]
        include:
          # MacOS configs
          - os: macos-14
            cpp_compiler: g++-13
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic -Wl,-ld_classic"

          - os: macos-14
            cpp_compiler: g++-13
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic -Wl,-ld_classic"

          - os: macos-14
            cpp_compiler: clang++
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"

          - os: macos-14
            cpp_compiler: clang++
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"

          - os: macos-13
            cpp_compiler: clang++
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"

          - os: macos-13
            cpp_compiler: clang++
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"

          - os: macos-12
            cpp_compiler: clang++
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"

          - os: macos-12
            cpp_compiler: clang++
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"

          - os: macos-11
            cpp_compiler: clang++
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"

          - os: macos-11
            cpp_compiler: clang++
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"

          # Windows configs
          - os: windows-2022
            extra_cmake_options: "-A x64"
            cpp_options: "/std:c++17 /W3"
            cpp_compiler: cl

          - os: windows-2022
            extra_cmake_options: "-A x64"
            cpp_options: "/std:c++14 /W3"
            cpp_compiler: cl

          - os: windows-2022
            extra_cmake_options: "-A Win32"
            cpp_options: "/std:c++17 /W3"
            cpp_compiler: cl

          - os: windows-2022
            extra_cmake_options: "-A Win32"
            cpp_options: "/std:c++14 /W3"
            cpp_compiler: cl

          - os: windows-2019
            extra_cmake_options: "-A x64"
            cpp_options: "/std:c++17 /W3"
            cpp_compiler: cl

          - os: windows-2019
            extra_cmake_options: "-A x64"
            cpp_options: "/std:c++14 /W3"
            cpp_compiler: cl

          - os: windows-2019
            extra_cmake_options: "-A Win32"
            cpp_options: "/std:c++17 /W3"
            cpp_compiler: cl

          - os: windows-2019
            extra_cmake_options: "-A Win32"
            cpp_options: "/std:c++14 /W3"
            cpp_compiler: cl

    env:
      CMAKE_CONFIGURE: >-
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        "-DEASYPB_CXX_FLAGS=${{ matrix.cpp_options }}"
        ${{ matrix.extra_cmake_options }}
        -DCMAKE_BUILD_TYPE=

    steps:
    - uses: actions/checkout@v4

    - name: 'Debug: Configure CMake'
      run: ${{ env.CMAKE_CONFIGURE }}Debug
    - name: 'Debug: Build'
      run: cmake --build build --config Debug
    - name: 'Debug: Test'
      working-directory: build
      run: ctest --build-config Debug

    - name: 'Release: Configure CMake'
      run: ${{ env.CMAKE_CONFIGURE }}Release
    - name: 'Release: Build'
      run: cmake --build build --config Release
    - name: 'Release: Test'
      working-directory: build
      run: ctest --build-config Release

    - name: 'MinSizeRel: Configure CMake'
      run: ${{ env.CMAKE_CONFIGURE }}MinSizeRel
    - name: 'MinSizeRel: Build'
      run: cmake --build build --config MinSizeRel
    - name: 'MinSizeRel: Test'
      working-directory: build
      run: ctest --build-config MinSizeRel



  #####################################################################################################################
  # Build with older gcc/clang versions, starting from gcc 4.7 and clang 3.5.
  # Also build with default gcc versions to ensure that we support default compilers on LTS Linux releases.
  #####################################################################################################################
  docker:
    runs-on: [ubuntu-latest]
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        cpp_compiler: [g++]
        cpp_options: ["-std=c++11 -Wall -Wextra -Wpedantic"]
        image: ['ubuntu:14.04', 'ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:22.04', 'ubuntu:24.04',
                'ubuntu:rolling', 'ubuntu:devel',  #'i386/ubuntu', 'i386/ubuntu:22.04',
                'debian:10', 'debian:11', 'debian:12', 'debian:testing', 'debian:experimental',
                'centos:7', 'rockylinux:8', 'rockylinux:9', 'fedora:latest', 'fedora:rawhide']
        extra_cmake_options: [""]

        include:
          # gcc configs
          - cpp_compiler: g++-4.7
            cpp_options: "-std=c++11 -Wall -Wextra"
            image: ubuntu:14.04

          - cpp_compiler: g++-4.8
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:14.04

          - cpp_compiler: g++-4.9
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:16.04

          - cpp_compiler: g++-5
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:16.04

          - cpp_compiler: g++-7
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:18.04

          - cpp_compiler: g++-8
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:18.04

          - cpp_compiler: g++-14
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:24.04

          - cpp_compiler: g++-14
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"
            image: ubuntu:24.04

          # clang configs
          - cpp_compiler: clang++-3.5
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:14.04

          - cpp_compiler: clang++-3.8
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:14.04

          - cpp_compiler: clang++-7
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:18.04

          - cpp_compiler: clang++-8
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:20.04

          - cpp_compiler: clang++-9
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:20.04

          - cpp_compiler: clang++-10
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"
            image: ubuntu:20.04

          - cpp_compiler: clang++-11
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"
            image: ubuntu:20.04

          - cpp_compiler: clang++-12
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"
            image: ubuntu:20.04

          - cpp_compiler: clang++-16
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"
            image: ubuntu:24.04

          - cpp_compiler: clang++-17
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"
            image: ubuntu:24.04

          - cpp_compiler: clang++-18
            cpp_options: "-std=c++11 -Wall -Wextra -Wpedantic"
            image: ubuntu:24.04

          - cpp_compiler: clang++-18
            cpp_options: "-std=c++17 -Wall -Wextra -Wpedantic"
            image: ubuntu:24.04

      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

    env:
      CMAKE_CONFIGURE: >-
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        "-DEASYPB_CXX_FLAGS=${{ matrix.cpp_options }}"
        ${{ matrix.extra_cmake_options }}
        -DCMAKE_BUILD_TYPE=


    steps:
    - name: Install dependencies on RedHat Linux
      if: contains(matrix.image, 'centos') || contains(matrix.image, 'rockylinux') || contains(matrix.image, 'fedora')
      run: |
        yum install -y make gcc-c++

    - name: Install dependencies on Debian
      if: contains(matrix.image, 'ubuntu') || contains(matrix.image, 'debian')
      run: |
        apt-get update -y
        apt-get install -y curl make ${{ matrix.cpp_compiler }}

    - name: Install CMake
      run: |
        curl -L -O https://github.com/Kitware/CMake/releases/download/v3.25.3/cmake-3.25.3-linux-x86_64.sh
        chmod +x cmake-3.25.3-linux-x86_64.sh
        ./cmake-3.25.3-linux-x86_64.sh --skip-license --prefix=/usr/local

    # Use an old version of the checkout action, since the newer ones are incompatble with old linuxes
    - uses: actions/checkout@v3

    - name: 'Debug: Configure CMake'
      run: ${{ env.CMAKE_CONFIGURE }}Debug
    - name: 'Debug: Build'
      run: cmake --build build --config Debug
    - name: 'Debug: Test'
      working-directory: build
      run: ctest --build-config Debug

    - name: 'Release: Configure CMake'
      run: ${{ env.CMAKE_CONFIGURE }}Release
    - name: 'Release: Build'
      run: cmake --build build --config Release
    - name: 'Release: Test'
      working-directory: build
      run: ctest --build-config Release

    - name: 'MinSizeRel: Configure CMake'
      run: ${{ env.CMAKE_CONFIGURE }}MinSizeRel
    - name: 'MinSizeRel: Build'
      run: cmake --build build --config MinSizeRel
    - name: 'MinSizeRel: Test'
      working-directory: build
      run: ctest --build-config MinSizeRel
